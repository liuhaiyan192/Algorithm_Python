#  二分查找
def binary_search(lists, item):
    print(lists[2])
    low = 0
    high = len(lists) - 1  # 数组的长度为传入数值减1，数组索引从0开始
    while low <= high:
        mid = (high+low)/2  # mid自动转为了str类型
        print(mid)
        guess = lists[int(mid)]  # 类型转换之后，获取到传入数组中中间的数值
        if guess == item:
            return guess
        if guess < item:
            low = guess + 1
        else:
            high = guess - 1
    return None
my_List = [1,3,9,4,2,12,90]
print(binary_search(my_List, 12))


"""
    # 排序算法
    将数组元素按从小到大的顺序排列
    选择排序
"""
def findSmallest(arr):
    smallArr = arr[0]   # 存储最小的值
    smallArr_index = 0      # 存储最小值的索引
    for i in range(1, len(arr)):
        if arr[i] < smallArr:
            smallArr_index = i
            # print(arr[i])
    # return smallArr_index
    return arr.pop(smallArr_index)


def searchArr(arr):     # 对数组进行排序
    newArrs = []
    for i in range(len(arr)):
        newArr = findSmallest(arr)
        # newArrs.append(arr.pop(newArr))
        newArrs.append(newArr)
    print(newArrs)

my_List = [9,0,2,10,3,67,12,38,1]
searchArr(my_List)


"""
    递归函数

"""
def greet(name):
    print("Hello " + name)
    greet2(name)  # 调用greet2函数时，当前greet函数暂停并处于未完成状态
    print("get ready to say ")
    bye()

def greet2(name):
    print("How are you " + name)

def bye():
    print("Ok bye")

greet("Bob")

"""
    快速排序
    （将无序数组中的元素按照从小到大的顺序排序之后打印出）
"""
def quicksort(array):
    if len(array) < 2:
        return array  # 基线条件，为空的时候，或者只包含一个元素的时候，数组本身是有序的
    else:
        privot = array[0]  # 递归条件。（也叫基准值，取数组中第一个元素为基准值，也可以取其他的数值作为基准值）
        less = [i for i in array[1:] if i <= privot]  # 将小于基准值/递归条件的数组放在基准值/递归条件的左边
        greater = [i for i in array[1:] if i > privot]  # 将大于基准值/递归条件的数组放在基准值/递归条件的右边
        return quicksort(less) + [privot] + quicksort(greater)  # quicksort(less)，quicksort(greater)重新排序，将左边，基准值，右边的数组重新返回

array = [12,2,3,0,1,4,10,21,23]
print(quicksort(array))



